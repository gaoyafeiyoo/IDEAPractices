/*
* 关于方法  什么时候定义为实例方法 什么时候定义为静态方法
* 参考标准：当这个方法体当中直接访问了实例变量就一定是实例方法
* 工具类当中的方法一般都是静态的
* 什么时候方法定义为实例方法：
* 不同的对象调用这个方法的结果是不同的就定义为实例方法  例如考试 每个人考试的结果都不一样
* 类 = 属性 + 方法
* 属性描述的是  状态
* 方法描述的是  动作
*
*
*静态代码块：
* 使用 static关键字可以定义静态代码块
* 语法：static{
* java语句;
* }
*静态代码块在类加载的时候执行 只执行一次 而且是自上而下执行  并且在main方法执行之前执行
*
* 作用：
* 第一：静态代码块不是那么常用（不是每个类当中都要写）
* 第二：静态代码块实际上是SUN公司给我们的一个特殊时刻/时机（类加载时机）例如：记录类加载的日志信息
* 就可以写到静态代码块里面
*方法区中放置静态变量和代码片段
*静态代码块里面不能访问实例变量  因为static静态代码块是在类加载的时候执行的并且只执行一次
* 类加载的时候  实例变量的空间还没有开辟出来呢
*静态变量和静态代码块也是与先后顺序的  都是在类加载的时候执行的 谁在前谁先执行  如果先执行
* 代码块 再定义变量会出现一个非法前向引用的错误
*
*/
public class Static03 {
    static int i = 100;
    int m = 10;
    static {
        System.out.println("i = " + i);
    }
    //static int i = 100;    //当把i定义在这里程序就会出错  因为静态代码块是自上而下执行的
                             // 放在这里就会出现逻辑错误
    static{
        //System.out.println("m = " + m);//这里会出错  因为类加载的时候 m的空间还没有开辟出来
    }
    public static void main(String[] args) {
        System.out.println("HelloWorld！");
    }
    static{
        System.out.println("C");
    }
}
